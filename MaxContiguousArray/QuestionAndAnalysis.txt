Find the contiguous subarray within an array, A of length N which has the largest sum

Problem Constraints:
1 <= N <= 1e6 , -1000 <= A[i] <= 1000

Input 1: A = [1, 2, 3, 4, -10] 
Output 1: 10   {1,2,3,4}

Input 2: A = [-2, 1, -3, 4, -1, 2, 1, -5, 4] 
Output 2:6  {4, -1, 2, 1}


Solution:

1. Brute Force Approach:  
Calculate the sum of every possible subarray and the maximum of those would be the solution. 
We can start from index 0 and calculate the sum of every possible subarray starting with the element A[0]. 
Then, we would calculate the sum of every possible subarray starting with A[1], A[2] and so on up to A[n-1], where n denotes the size of the array. 
Note that every single element is a subarray itself.
We will call the maximum sum of subarrays starting with element A[i] the local_maximum at index i. Thus after going through all the indices, we would be left 
with local_maximum for all the indices. 
Finally, we can find the maximum of these local_maximums and we would get the final solution, i.e. the maximum sum possible. We would call this the global_maximum.

TC: O(N2)

2. Optimised Approach
Use Kadane's algorithm along woth carry forward technique.
It calculates the maximum sum subarray ending at a particular position by using the maximum sum subarray ending at the previous position. 
Follow the below steps to solve the problem.
-Define two-variable currSum which stores maximum sum ending here and maxSum which stores maximum sum so far.
-Initialize currSum with 0 and maxSum with INT_MIN.
-Now, iterate over the array and add the value of the current element to currSum and check
-If currSum is greater than maxSum, update maxSum equals to currSum.
-If currSum is less than zero, make currSum equal to zero.
-Finally, print the value of maxSum.


Example
                        A : 5,  6,  7,  -3,   2,  -10,  -12,                8,    12,   21,   -4,     7
currentSum= 0               5   11  18  15    17    7   -5(reset sum to O)  8     20    41    37      44
ans= Integer.Minimum        5   11  18  18    18   18   18                  18    20    41    41      44
